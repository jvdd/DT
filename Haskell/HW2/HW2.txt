------------------------- OPDRACHT 1: isVanGraaf -------------------------

isVanGraaf :: [Int] -> Bool
isVanGraaf [] = True
isVanGraaf (x : rest) = if x == 0  -- Omdat de lijst steeds gesorteerd is staat hoeven we enkel het eerste el. op == 0 te checken
                            then (
                                    if bevatNeg rest then False
                                    else True -- Al de waarden in rest zijn dan ook 0
                                 )
                        else if x < 0 then False -- Bij negatieve waarden is het geen graaf
                        else isVanGraaf (qs (sAccent x rest [])) -- Moet gesorteerd zijn voor de volgende stap
                            where sAccent 0 rest acc = acc ++ rest -- Met accumulator dus lijst is omgekeerd, maar maakt niet uit want wordt toch gesorteerd
                                  sAccent x [] acc = if x > 0 then [-1] -- Zodat het dan false zal teruggeven
                                                     else acc
                                  sAccent n (x : xs) acc = sAccent (n - 1) xs ((x - 1) : acc)

bevatNeg :: [Int] -> Bool
bevatNeg [] = False
bevatNeg (x : rest) = if x < 0 then True
                      else bevatNeg rest

qs [] = []
qs (pivot:xs) = (qs [x | x <- xs, x > pivot]) ++ (pivot : qs [y | y <-xs, y <= pivot])




------------------------- OPDRACHT 2: koninginnen -------------------------

koninginnen :: Int -> [[(Int,Int)]]
koninginnen n = [ y | x <- perm [1..n], diagConstr [1..n] x, y <- [zip [1..n] x]]
    where diagConstr [] [] = True
          diagConstr (x1 : rest1) (x2 : rest2) = if not (gelijkElem (dif x1 rest1) (dif x2 rest2)) then diagConstr rest1 rest2
                                                 else False
          dif x lijst = dif3 x lijst [] -- accumulator voor efficiëntie
          dif3 _ [] acc = acc           -- lijst is dan wel omgekeerd, maar dat maakt niet uit
          dif3 x (el : rest) acc = dif3 x rest (abs(x - el) : acc)

perm :: [Int] -> [[Int]]
perm [] = [[]]
perm l = [ y | x <- l, y <- map (x:) (perm (delete x l))]

delete :: Int -> [Int] -> [Int]
delete _ [] = []
delete x (el : rest) = if x == el then rest -- enkel eerste x wordt uit lijst verwijderd
                       else el : (delete x rest)

gelijkElem :: [Int] -> [Int] -> Bool
gelijkElem [] [] = False
gelijkElem (x1 : rest1) (x2 : rest2) = if (x1 == x2) then True
                                       else gelijkElem rest1 rest2